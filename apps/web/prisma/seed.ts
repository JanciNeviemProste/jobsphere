import { PrismaClient } from '@prisma/client'
import { hash } from 'bcryptjs'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Starting seed...')

  // Clear existing data
  console.log('üóëÔ∏è  Clearing existing data...')
  await prisma.applicationActivity.deleteMany()
  await prisma.application.deleteMany()
  await prisma.job.deleteMany()
  await prisma.candidateContact.deleteMany()
  await prisma.candidate.deleteMany()
  await prisma.userOrgRole.deleteMany()
  await prisma.organization.deleteMany()
  await prisma.session.deleteMany()
  await prisma.user.deleteMany()

  // Create demo password (all users will have password: demo123)
  const hashedPassword = await hash('demo123', 12)

  // ============================================================================
  // ORGANIZATIONS
  // ============================================================================

  console.log('üè¢ Creating organizations...')

  const techCorp = await prisma.organization.create({
    data: {
      name: 'TechCorp SK',
      slug: 'techcorp-sk',
      description: 'Modern√° IT spoloƒçnos≈• zameran√° na v√Ωvoj inovat√≠vnych rie≈°en√≠.',
      website: 'https://techcorp.sk',
      industry: 'Technology',
      size: '50-200',
    },
  })

  const startupHub = await prisma.organization.create({
    data: {
      name: 'StartupHub',
      slug: 'startuphub',
      description: 'Kreat√≠vny startup building next-gen SaaS products.',
      website: 'https://startuphub.io',
      industry: 'SaaS',
      size: '10-50',
    },
  })

  const dataSolutions = await prisma.organization.create({
    data: {
      name: 'DataSolutions',
      slug: 'datasolutions',
      description: 'Enterprise data analytics and AI consulting.',
      website: 'https://datasolutions.eu',
      industry: 'Data & Analytics',
      size: '200-500',
    },
  })

  console.log(`‚úÖ Created ${3} organizations`)

  // ============================================================================
  // USERS
  // ============================================================================

  console.log('üë• Creating users...')

  // Employers
  const employer1 = await prisma.user.create({
    data: {
      email: 'admin@techcorp.sk',
      name: 'Peter Nov√°k',
      password: hashedPassword,
      phone: '+421 900 111 111',
    },
  })

  const employer2 = await prisma.user.create({
    data: {
      email: 'recruiter@startuphub.io',
      name: 'Jana Horv√°thov√°',
      password: hashedPassword,
      phone: '+421 900 222 222',
    },
  })

  const employer3 = await prisma.user.create({
    data: {
      email: 'hr@datasolutions.eu',
      name: 'Martin Kov√°ƒç',
      password: hashedPassword,
      phone: '+421 900 333 333',
    },
  })

  // Candidates
  const candidate1 = await prisma.user.create({
    data: {
      email: 'jan.novak@example.com',
      name: 'J√°n Nov√°k',
      password: hashedPassword,
      phone: '+421 900 444 444',
    },
  })

  const candidate2 = await prisma.user.create({
    data: {
      email: 'maria.kovacova@example.com',
      name: 'M√°ria Kov√°ƒçov√°',
      password: hashedPassword,
      phone: '+421 900 555 555',
    },
  })

  const candidate3 = await prisma.user.create({
    data: {
      email: 'peter.szabo@example.com',
      name: 'Peter Szab√≥',
      password: hashedPassword,
      phone: '+421 900 666 666',
    },
  })

  console.log(`‚úÖ Created ${6} users`)

  // ============================================================================
  // ORG MEMBERS
  // ============================================================================

  console.log('üëî Creating org memberships...')

  await prisma.userOrgRole.create({
    data: {
      userId: employer1.id,
      orgId: techCorp.id,
      role: 'ORG_ADMIN',
    },
  })

  await prisma.userOrgRole.create({
    data: {
      userId: employer2.id,
      orgId: startupHub.id,
      role: 'ORG_ADMIN',
    },
  })

  await prisma.userOrgRole.create({
    data: {
      userId: employer3.id,
      orgId: dataSolutions.id,
      role: 'ORG_ADMIN',
    },
  })

  console.log(`‚úÖ Created ${3} org memberships`)

  // ============================================================================
  // JOBS
  // ============================================================================

  console.log('üíº Creating jobs...')

  const jobs = await Promise.all([
    // TechCorp jobs
    prisma.job.create({
      data: {
        orgId: techCorp.id,
        createdBy: employer1.id,
        title: 'Senior React Developer',
        description: `## O poz√≠cii

Hƒæad√°me sk√∫sen√©ho React developera na roz≈°√≠renie n√°≈°ho t√≠mu.

## Po≈æiadavky

- 5+ rokov sk√∫senost√≠ s React
- TypeScript, Next.js
- REST APIs, GraphQL
- Git, CI/CD

## Pon√∫kame

- Pr√°ca na modern√Ωch projektoch
- Flexibiln√° pracovn√° doba
- Home office mo≈ænos≈•
- Benefity (MultiSport, stravn√© l√≠stky)`,
        city: 'Bratislava',
        region: 'BA',
        hybrid: true,
        employmentType: 'FULL_TIME',
        salaryMin: 3000,
        salaryMax: 5000,
        seniority: 'SENIOR',
        status: 'PUBLISHED',
      },
    }),

    prisma.job.create({
      data: {
        orgId: techCorp.id,
        createdBy: employer1.id,
        title: 'Backend Developer (Node.js)',
        description: `## O poz√≠cii

Backend developer poz√≠cia pre pr√°cu na enterprise projektoch.

## Po≈æiadavky

- 3+ rokov Node.js
- PostgreSQL, MongoDB
- Docker, Kubernetes
- Microservices architecture

## Pon√∫kame

- Competitive salary
- Vzdel√°vanie a certifik√°cie
- Modern√© technol√≥gie`,
        city: 'Bratislava',
        region: 'BA',
        remote: false,
        hybrid: false,
        employmentType: 'FULL_TIME',
        salaryMin: 2500,
        salaryMax: 4000,
        seniority: 'MID',
        status: 'PUBLISHED',
      },
    }),

    // StartupHub jobs
    prisma.job.create({
      data: {
        orgId: startupHub.id,
        createdBy: employer2.id,
        title: 'Full Stack Developer',
        description: `## O poz√≠cii

Join our startup and build amazing SaaS products!

## Po≈æiadavky

- React + Node.js
- Database design
- Startup mindset
- English fluency

## Pon√∫kame

- Equity options
- Remote work
- Flat hierarchy
- Impact on product`,
        city: 'Ko≈°ice',
        region: 'KE',
        remote: true,
        employmentType: 'FULL_TIME',
        salaryMin: 2000,
        salaryMax: 3500,
        seniority: 'MID',
        status: 'PUBLISHED',
      },
    }),

    prisma.job.create({
      data: {
        orgId: startupHub.id,
        createdBy: employer2.id,
        title: 'Junior Frontend Developer',
        description: `## O poz√≠cii

Perfect for fresh graduates! Learn from experienced team.

## Po≈æiadavky

- HTML, CSS, JavaScript
- React basics
- Willingness to learn
- Team player

## Pon√∫kame

- Mentorship program
- Career growth
- Modern tech stack`,
        city: 'Ko≈°ice',
        region: 'KE',
        hybrid: true,
        employmentType: 'FULL_TIME',
        salaryMin: 1200,
        salaryMax: 1800,
        seniority: 'ENTRY',
        status: 'PUBLISHED',
      },
    }),

    // DataSolutions jobs
    prisma.job.create({
      data: {
        orgId: dataSolutions.id,
        createdBy: employer3.id,
        title: 'Data Engineer',
        description: `## O poz√≠cii

Build data pipelines for enterprise clients.

## Po≈æiadavky

- Python, SQL
- Apache Spark, Airflow
- AWS/Azure experience
- ETL pipelines

## Pon√∫kame

- Work with big data
- International projects
- Competitive salary`,
        city: '≈Ωilina',
        region: 'ZA',
        hybrid: true,
        employmentType: 'FULL_TIME',
        salaryMin: 2800,
        salaryMax: 4500,
        seniority: 'SENIOR',
        status: 'PUBLISHED',
      },
    }),

    prisma.job.create({
      data: {
        orgId: dataSolutions.id,
        createdBy: employer3.id,
        title: 'DevOps Engineer',
        description: `## O poz√≠cii

DevOps engineer for cloud infrastructure.

## Po≈æiadavky

- Kubernetes, Docker
- Terraform, Ansible
- AWS/GCP/Azure
- CI/CD pipelines

## Pon√∫kame

- Cloud certifications
- Latest tools
- Challenging projects`,
        city: '≈Ωilina',
        region: 'ZA',
        remote: true,
        employmentType: 'FULL_TIME',
        salaryMin: 3200,
        salaryMax: 5200,
        seniority: 'LEAD',
        status: 'PUBLISHED',
      },
    }),
  ])

  console.log(`‚úÖ Created ${jobs.length} jobs`)

  // ============================================================================
  // CANDIDATES
  // ============================================================================

  console.log('üë§ Creating candidates...')

  const candidate1Data = await prisma.candidate.create({
    data: {
      orgId: techCorp.id,
      source: 'WEBSITE',
      contacts: {
        create: {
          fullName: 'J√°n Nov√°k',
          email: 'jan.novak@example.com',
          phone: '+421 900 444 444',
          isPrimary: true,
        },
      },
    },
  })

  const candidate2Data = await prisma.candidate.create({
    data: {
      orgId: startupHub.id,
      source: 'WEBSITE',
      contacts: {
        create: {
          fullName: 'M√°ria Kov√°ƒçov√°',
          email: 'maria.kovacova@example.com',
          phone: '+421 900 555 555',
          isPrimary: true,
        },
      },
    },
  })

  const candidate3Data = await prisma.candidate.create({
    data: {
      orgId: dataSolutions.id,
      source: 'WEBSITE',
      contacts: {
        create: {
          fullName: 'Peter Szab√≥',
          email: 'peter.szabo@example.com',
          phone: '+421 900 666 666',
          isPrimary: true,
        },
      },
    },
  })

  console.log(`‚úÖ Created ${3} candidates with contacts`)

  // ============================================================================
  // APPLICATIONS
  // ============================================================================

  console.log('üìù Creating applications...')

  const app1 = await prisma.application.create({
    data: {
      jobId: jobs[0].id, // Senior React Developer
      candidateId: candidate1Data.id,
      orgId: techCorp.id,
      coverLetter: `Dobr√Ω de≈à,

Som nad≈°en√Ω, ≈æe m√¥≈æem po≈æiada≈• o poz√≠ciu Senior React Developer vo va≈°ej spoloƒçnosti. S viac ako 5 rokmi sk√∫senost√≠ v React v√Ωvoji a s hlbok√Ωmi znalos≈•ami TypeScript, Next.js a modern√Ωch frontend technol√≥gi√≠ si mysl√≠m, ≈æe som ide√°lny kandid√°t pre t√∫to rolu.

Vo svojej predch√°dzaj√∫cej poz√≠cii som viedol t√≠m 5 v√Ωvoj√°rov pri vytv√°ran√≠ komplexnej e-commerce platformy, ktor√° obsluhuje viac ako 100,000 pou≈æ√≠vateƒæov mesaƒçne. Implementoval som pokroƒçil√© state management rie≈°enia, optimalizoval v√Ωkon aplik√°cie a zaviedol best practices pre code review a testing.

Te≈°√≠m sa na mo≈ænos≈• prispie≈• k va≈°im projektom a prinies≈• moje sk√∫senosti do v√°≈°ho t√≠mu.

S pozdravom,
J√°n Nov√°k`,
      stage: 'SCREENING',
    },
  })

  await prisma.applicationActivity.createMany({
    data: [
      {
        applicationId: app1.id,
        type: 'STAGE_CHANGE',
        description: 'Application submitted - moving to SCREENING stage',
      },
      {
        applicationId: app1.id,
        type: 'NOTE_ADDED',
        description: 'HR team is reviewing your application',
      },
    ],
  })

  const app2 = await prisma.application.create({
    data: {
      jobId: jobs[2].id, // Full Stack Developer
      candidateId: candidate2Data.id,
      orgId: startupHub.id,
      coverLetter: `Hello,

I am very excited about the Full Stack Developer position at StartupHub. I have 3 years of experience building modern web applications with React and Node.js.

I'm particularly attracted to the startup environment and the opportunity to have real impact on the product. My previous experience includes building a real-time collaboration tool from scratch, which is now used by over 5,000 users.

Looking forward to discussing how I can contribute to your team!

Best regards,
M√°ria Kov√°ƒçov√°`,
      stage: 'PHONE',
    },
  })

  await prisma.applicationActivity.createMany({
    data: [
      {
        applicationId: app2.id,
        type: 'STAGE_CHANGE',
        description: 'Application submitted - moving to NEW stage',
      },
      {
        applicationId: app2.id,
        type: 'STAGE_CHANGE',
        description: 'Application moved to SCREENING stage',
      },
      {
        applicationId: app2.id,
        type: 'STAGE_CHANGE',
        description: 'Phone interview scheduled - moved to PHONE stage',
      },
    ],
  })

  const app3 = await prisma.application.create({
    data: {
      jobId: jobs[4].id, // Data Engineer
      candidateId: candidate3Data.id,
      orgId: dataSolutions.id,
      coverLetter: `Dear Hiring Manager,

I am writing to apply for the Data Engineer position. With 4 years of experience in building data pipelines and working with Apache Spark and Airflow, I believe I would be a great fit for your team.

In my current role, I designed and implemented ETL pipelines processing over 10TB of data daily. I have extensive experience with AWS services including EMR, Glue, and Redshift.

I am passionate about working with big data and would love to contribute to your enterprise projects.

Sincerely,
Peter Szab√≥`,
      stage: 'NEW',
    },
  })

  await prisma.applicationActivity.create({
    data: {
      applicationId: app3.id,
      type: 'STAGE_CHANGE',
      description: 'Application submitted - in NEW stage',
    },
  })

  console.log(`‚úÖ Created ${3} applications with events`)

  // ============================================================================
  // SUMMARY
  // ============================================================================

  console.log('\nüìä Seed Summary:')
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ')
  console.log(`‚úÖ ${3} Organizations`)
  console.log(`‚úÖ ${3} Employer Users`)
  console.log(`‚úÖ ${3} User-Org Roles`)
  console.log(`‚úÖ ${3} Candidates (with contacts)`)
  console.log(`‚úÖ ${jobs.length} Jobs`)
  console.log(`‚úÖ ${3} Applications`)
  console.log(`‚úÖ ${6} Application Activities`)
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ')
  console.log('\nüîê Demo Credentials (password: demo123):')
  console.log('\nEmployers:')
  console.log('  ‚Ä¢ admin@techcorp.sk (TechCorp SK)')
  console.log('  ‚Ä¢ recruiter@startuphub.io (StartupHub)')
  console.log('  ‚Ä¢ hr@datasolutions.eu (DataSolutions)')
  console.log('\nCandidates (stored as Candidate records):')
  console.log('  ‚Ä¢ J√°n Nov√°k (jan.novak@example.com)')
  console.log('  ‚Ä¢ M√°ria Kov√°ƒçov√° (maria.kovacova@example.com)')
  console.log('  ‚Ä¢ Peter Szab√≥ (peter.szabo@example.com)')
  console.log('\n‚ú® Seed completed successfully!')
}

main()
  .catch((e) => {
    console.error('‚ùå Seed failed:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
