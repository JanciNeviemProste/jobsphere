// Simplified Prisma Schema for JobSphere
// This schema is compatible with the API routes we've created

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// AUTH MODELS
// ============================================================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  password      String? // bcrypt hashed
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  orgMembers    OrgMember[]
  applications  Application[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============================================================================
// ORGANIZATION MODELS
// ============================================================================

model Organization {
  id          String   @id @default(cuid())
  name        String
  logo        String?
  description String?  @db.Text
  email       String?
  phone       String?
  website     String?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members       OrgMember[]
  jobs          Job[]

  @@index([name])
}

model OrgMember {
  id     String @id @default(cuid())
  userId String
  organizationId String
  role   String @default("MEMBER") // ADMIN, RECRUITER, MEMBER

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

// ============================================================================
// JOB & APPLICATION MODELS
// ============================================================================

model Job {
  id             String   @id @default(cuid())
  organizationId String
  title          String
  description    String   @db.Text
  location       String
  salaryMin      Int?
  salaryMax      Int?
  workMode       String   @default("HYBRID") // REMOTE, HYBRID, ONSITE
  type           String   @default("FULL_TIME") // FULL_TIME, PART_TIME, CONTRACT
  seniority      String   @default("MEDIOR") // JUNIOR, MEDIOR, SENIOR, LEAD
  status         String   @default("ACTIVE") // ACTIVE, CLOSED, DRAFT
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  applications Application[]

  @@index([organizationId])
  @@index([status])
}

model Application {
  id             String    @id @default(cuid())
  jobId          String
  candidateId    String
  coverLetter    String    @db.Text
  cvUrl          String?
  expectedSalary Int?
  availableFrom  DateTime?
  status         String    @default("PENDING") // PENDING, REVIEWING, INTERVIEWED, ACCEPTED, REJECTED
  notes          String?   @db.Text
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  job       Job                @relation(fields: [jobId], references: [id], onDelete: Cascade)
  candidate User               @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  events    ApplicationEvent[]

  @@index([jobId])
  @@index([candidateId])
  @@index([status])
}

model ApplicationEvent {
  id            String   @id @default(cuid())
  applicationId String
  type          String // APPLIED, STATUS_CHANGED, NOTE_ADDED
  title         String
  description   String?  @db.Text
  createdAt     DateTime @default(now())

  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@index([applicationId])
}

// ============================================================================
// EMAIL MODELS
// ============================================================================

model Email {
  id        String   @id @default(cuid())
  to        String
  subject   String
  body      String   @db.Text
  status    String   @default("PENDING") // PENDING, SENT, FAILED
  provider  String?  // resend, sendgrid, log
  createdAt DateTime @default(now())
  sentAt    DateTime?

  @@index([to])
  @@index([status])
}

// ============================================================================
// SUBSCRIPTION MODELS
// ============================================================================

model Subscription {
  id             String    @id @default(cuid())
  organizationId String
  plan           String    @default("FREE") // FREE, STARTER, PROFESSIONAL, ENTERPRISE
  status         String    @default("ACTIVE") // ACTIVE, CANCELED, PAST_DUE
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean  @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([organizationId])
  @@index([status])
}

model Invoice {
  id             String   @id @default(cuid())
  organizationId String
  amount         Int
  currency       String   @default("EUR")
  status         String   @default("PENDING") // PENDING, PAID, FAILED
  dueDate        DateTime
  paidAt         DateTime?
  createdAt      DateTime @default(now())

  @@index([organizationId])
  @@index([status])
}
