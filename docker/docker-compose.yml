version: '3.9'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: jobsphere-postgres
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: jobsphere
      POSTGRES_PASSWORD: jobsphere_dev_2024
      POSTGRES_DB: jobsphere
      POSTGRES_EXTENSIONS: 'uuid-ossp,pgvector,pg_trgm,btree_gin'
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U jobsphere']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    container_name: jobsphere-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: jobsphere-minio
    restart: unless-stopped
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_DEFAULT_BUCKETS: jobsphere-uploads,jobsphere-exports
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  # Meilisearch for full-text search
  meilisearch:
    image: getmeili/meilisearch:v1.6
    container_name: jobsphere-meilisearch
    restart: unless-stopped
    ports:
      - '7700:7700'
    environment:
      MEILI_MASTER_KEY: 'jobsphere_dev_master_key_2024'
      MEILI_ENV: 'development'
      MEILI_NO_ANALYTICS: 'true'
    volumes:
      - meilisearch-data:/meili_data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:7700/health']
      interval: 10s
      timeout: 5s
      retries: 5

  # ClamAV for virus scanning
  clamav:
    image: clamav/clamav:latest
    container_name: jobsphere-clamav
    restart: unless-stopped
    ports:
      - '3310:3310'
    volumes:
      - clamav-data:/var/lib/clamav
    healthcheck:
      test: ['CMD', 'clamdcheck.sh']
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 120s

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: jobsphere-mailhog
    restart: unless-stopped
    ports:
      - '1025:1025' # SMTP
      - '8025:8025' # Web UI
    environment:
      MH_STORAGE: memory
      MH_SMTP_BIND_ADDR: 0.0.0.0:1025
      MH_API_BIND_ADDR: 0.0.0.0:8025
      MH_UI_BIND_ADDR: 0.0.0.0:8025

  # pgBouncer for connection pooling
  pgbouncer:
    image: edoburu/pgbouncer:latest
    container_name: jobsphere-pgbouncer
    restart: unless-stopped
    ports:
      - '6433:5432'
    environment:
      DATABASES_HOST: postgres
      DATABASES_PORT: 5432
      DATABASES_DBNAME: jobsphere
      DATABASES_USER: jobsphere
      DATABASES_PASSWORD: jobsphere_dev_2024
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 1000
      DEFAULT_POOL_SIZE: 25
      MIN_POOL_SIZE: 5
      RESERVE_POOL_SIZE: 5
    depends_on:
      postgres:
        condition: service_healthy

  # Qdrant for vector search (optional alternative to pgvector)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: jobsphere-qdrant
    restart: unless-stopped
    ports:
      - '6333:6333'
      - '6334:6334'
    volumes:
      - qdrant-data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO

  # Python CV Parser with OCR (Tesseract)
  python-parser:
    build: ./python-parser
    container_name: jobsphere-python-parser
    restart: unless-stopped
    volumes:
      - parser-temp:/tmp/parser
    environment:
      TESSDATA_PREFIX: /usr/share/tesseract-ocr/4.00/tessdata
    healthcheck:
      test: ['CMD', 'python', '-c', 'print("healthy")']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s

volumes:
  postgres-data:
  redis-data:
  minio-data:
  meilisearch-data:
  clamav-data:
  qdrant-data:
  parser-temp:

networks:
  default:
    name: jobsphere-network
    driver: bridge